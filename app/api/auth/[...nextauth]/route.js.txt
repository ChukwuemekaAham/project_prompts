import NextAuth from 'next-auth';
import CredentialsProvider from "next-auth/providers/credentials"

import User from '@models/user';
import { connectToDB } from '@utils/database';

const handler = NextAuth({
  providers: [
      CredentialsProvider({
          name: "credentials",
          // The credentials object is what's used to generate Next Auths default login page - We will not use it however.
          credentials: {
              email: {label: "Email", type: "email"},
              password: {label: "Password", type: "password"}
          },
          // Authorize callback is ran upon calling the signin function
          authorize: async (credentials) => {
              connectToDB()

              // Try to find the user and also return the password field
              const user = await User.findOne({email: credentials.email}).select('+password')

              if(!user) { throw new Error('No user with a matching email was found.')}

              // Use the comparePassword method we defined in our user.js Model file to authenticate
              const pwValid = await user.comparePassword(credentials.password)

              if(!pwValid){ throw new Error("Your password is invalid") }

              return user
          }

          
      })
  ],
  callbacks: {
      async session({ session }) {
        // store the user id from MongoDB to session
        const sessionUser = await User.findOne({ email: session.user.email });
        session.user.id = sessionUser._id.toString();

        return session;
      },
      async signIn({ account, profile, user, credentials }) {
        try {
          await connectToDB();

          // check if user already exists
          const userExists = await User.findOne({ email: profile.email });

          // if not, create a new document and save user in MongoDB
          if (!userExists) {
            await User.create({
              email: profile.email,
              username: profile.name.replace(" ", "").toLowerCase(),
              image: profile.picture,
            });
          }

          return true
        } catch (error) {
          console.log("Error checking if user exists: ", error.message);
          return false
        }
      },
    }
})

export { handler as GET, handler as POST }
